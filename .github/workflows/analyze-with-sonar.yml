name: SonarCloud Analysis & Code Coverage

on:
  push:
    branches:
      - main
    paths:
      - 'GestionReservasWebII/**'
      - 'GestionReservasWebII.Tests/**'
      - 'GestionReservasWebII.sln'
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore Dependencies
        run: dotnet restore GestionReservasWebII.sln

      - name: Build Solution
        run: dotnet build --no-restore --configuration Debug GestionReservasWebII.sln

      - name: Run Tests with Coverage
        run: |
          mkdir -p GestionReservasWebII.Tests/TestResults  # Asegura que TestResults existe
          dotnet test GestionReservasWebII.Tests \
            --no-build \
            --collect:"XPlat Code Coverage" \
            --logger trx \
            --results-directory GestionReservasWebII.Tests/TestResults

      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Generate Coverage Report
        run: |
          ~/.dotnet/tools/reportgenerator \
            -reports:GestionReservasWebII.Tests/TestResults/**/coverage.cobertura.xml \
            -targetdir:coverage -reporttypes:Cobertura

      - name: Verify Coverage File Exists
        run: |
          echo "🔍 Checking for coverage file..."
          ls -R coverage/ || echo "⚠️ No coverage files found."

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/Cobertura.xml

  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: coverage

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore Dependencies
        run: dotnet restore GestionReservasWebII.sln

      - name: Build Solution
        run: dotnet build --no-restore --configuration Debug GestionReservasWebII.sln

      - name: Fetch SonarCloud Metrics and Display
        id: fetch-metrics
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          set -e
          SONAR_API_URL="https://sonarcloud.io/api/measures/component"
          PROJECT_KEY="JeanValverde24_Proyecto_Rec_Espejo"
          METRICS="bugs,vulnerabilities,code_smells,coverage,duplicated_lines_density,complexity,ncloc,cognitive_complexity,comment_lines_density,security_rating,reliability_rating,sqale_rating"
          echo "Fetching SonarCloud Metrics..."
          RESPONSE=$(curl -s -u "$SONAR_TOKEN:" "$SONAR_API_URL?component=$PROJECT_KEY&metricKeys=$METRICS")
          if [[ -z "$RESPONSE" || "$RESPONSE" == *"errors"* ]]; then
            echo "SonarCloud API Response: $RESPONSE"
            echo "Error fetching SonarCloud metrics. Please check the project key and SonarCloud API token."
            exit 1
          fi
          echo "SonarCloud API Response: $RESPONSE"
          echo "response=$RESPONSE" >> $GITHUB_ENV

      - name: Publish SonarCloud Metrics as Annotations
        run: |
          echo "## SonarCloud Metrics" >> $GITHUB_STEP_SUMMARY
          echo "| Metric               | Value   | Icon       |" >> $GITHUB_STEP_SUMMARY
          echo "|----------------------|---------|------------|" >> $GITHUB_STEP_SUMMARY
          echo $RESPONSE | jq -r '.component.measures[] | 
          if .metric == "coverage" then "| Coverage             | \(.value)% | :white_check_mark: |" 
          elif .metric == "complexity" then "| Complexity           | \(.value) | :triangular_ruler: |" 
          elif .metric == "ncloc" then "| Lines of Code        | \(.value) | :scroll: |" 
          elif .metric == "security_rating" then "| Security Rating      | \(.value) | :shield: |" 
          elif .metric == "reliability_rating" then "| Reliability Rating   | \(.value) | :tools: |" 
          elif .metric == "sqale_rating" then "| Maintainability      | \(.value) | :recycle: |" 
          elif .metric == "code_smells" then "| Code Smells          | \(.value) | :nose: |" 
          elif .metric == "duplicated_lines_density" then "| Duplications         | \(.value)% | :twisted_rightwards_arrows: |" 
          elif .metric == "cognitive_complexity" then "| Cognitive Complexity | \(.value) | :brain: |" 
          elif .metric == "bugs" then "| Bugs                 | \(.value) | :bug: |" 
          elif .metric == "comment_lines_density" then "| Comment Density      | \(.value)% | :speech_balloon: |" 
          else empty end' >> $GITHUB_STEP_SUMMARY
        env:
          RESPONSE: ${{ env.response }}

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=jeanvalverde24
            -Dsonar.projectKey=JeanValverde24_GestionReservasWebII
            -Dsonar.sources=GestionReservasWebII
            -Dsonar.cs.opencover.reportsPaths=coverage/Cobertura.xml
            -Dsonar.inclusions=GestionReservasWebII/**/*.cs
